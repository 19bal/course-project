/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * tkaframe.java
 *
 * Created on 19.Mar.2012, 20:53:13
 */
package tkaformplus;

import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Container;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.geom.Line2D;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.io.OutputStream;
import java.io.PrintStream;
import java.io.UnsupportedEncodingException;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.SwingUtilities;

/**
 *
 * @author gdemir
 */
public class tkaframe extends javax.swing.JFrame {
    List<List> output = new ArrayList<List>();
    public List<List> io_elements = new ArrayList<List>();
    public List<List> input_elements = new ArrayList<List>();
    public List<Double> output_elements = new ArrayList<Double>();
    private static List<Double> errors = new ArrayList<Double>();
    JFrame frame = new JFrame();

    /** Creates new form tkaframe */
    public tkaframe() {
        initComponents();
        redirectSystemStreams();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        textarea = new javax.swing.JTextArea();
        comboboxalgorithm = new javax.swing.JComboBox();
        train = new javax.swing.JButton();
        test = new javax.swing.JButton();
        clear = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        trainset = new javax.swing.JTextArea();
        jScrollPane3 = new javax.swing.JScrollPane();
        testset = new javax.swing.JTextArea();
        inputcount = new javax.swing.JTextField();
        labelinputcount = new javax.swing.JLabel();
        hiddencount = new javax.swing.JTextField();
        labelhiddencount = new javax.swing.JLabel();
        graph = new javax.swing.JButton();
        comboboxtestset = new javax.swing.JComboBox();
        comboboxtrainset = new javax.swing.JComboBox();
        labeltrainset = new javax.swing.JLabel();
        labeltestset = new javax.swing.JLabel();
        labelalgorithm = new javax.swing.JLabel();
        menu = new javax.swing.JMenuBar();
        file = new javax.swing.JMenu();
        opentrainfile = new javax.swing.JMenuItem();
        opentestfile = new javax.swing.JMenuItem();
        exit = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        textarea.setColumns(20);
        textarea.setRows(5);
        jScrollPane1.setViewportView(textarea);

        comboboxalgorithm.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "perceptron", "adaline", "backpropagation" }));

        train.setText("train");
        train.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                trainActionPerformed(evt);
            }
        });

        test.setText("test");
        test.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                testActionPerformed(evt);
            }
        });

        clear.setText("clear");
        clear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearActionPerformed(evt);
            }
        });

        trainset.setColumns(20);
        trainset.setRows(5);
        jScrollPane2.setViewportView(trainset);

        testset.setColumns(20);
        testset.setRows(5);
        jScrollPane3.setViewportView(testset);

        labelinputcount.setText("input count");

        hiddencount.setText("0");
        hiddencount.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                hiddencountActionPerformed(evt);
            }
        });

        labelhiddencount.setText("hidden count");

        graph.setText("error");
        graph.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                graphActionPerformed(evt);
            }
        });

        comboboxtestset.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "perceptron", "adaline", "backpropagation" }));

        comboboxtrainset.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "perceptron", "adaline", "backpropagation" }));

        labeltrainset.setText("train set");

        labeltestset.setText("test set");

        labelalgorithm.setText("algorithm");

        file.setText("File");

        opentrainfile.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_MASK));
        opentrainfile.setText("Open Train File");
        opentrainfile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                opentrainfileActionPerformed(evt);
            }
        });
        file.add(opentrainfile);

        opentestfile.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_T, java.awt.event.InputEvent.CTRL_MASK));
        opentestfile.setText("Open Test File");
        opentestfile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                opentestfileActionPerformed(evt);
            }
        });
        file.add(opentestfile);

        exit.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_C, java.awt.event.InputEvent.CTRL_MASK));
        exit.setText("Exit");
        exit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitActionPerformed(evt);
            }
        });
        file.add(exit);

        menu.add(file);

        setJMenuBar(menu);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(labelinputcount)
                            .addComponent(labelhiddencount))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(hiddencount, javax.swing.GroupLayout.DEFAULT_SIZE, 190, Short.MAX_VALUE)
                            .addComponent(inputcount, javax.swing.GroupLayout.DEFAULT_SIZE, 190, Short.MAX_VALUE)))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 256, Short.MAX_VALUE)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 256, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                            .addComponent(train, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(test, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(clear, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(graph, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 480, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(labelalgorithm)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(labeltestset)
                                        .addGap(3, 3, 3)))
                                .addGap(19, 19, 19))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(labeltrainset)
                                .addGap(18, 18, 18)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(comboboxalgorithm, javax.swing.GroupLayout.Alignment.TRAILING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(comboboxtestset, javax.swing.GroupLayout.Alignment.TRAILING, 0, 343, Short.MAX_VALUE)
                            .addComponent(comboboxtrainset, javax.swing.GroupLayout.PREFERRED_SIZE, 417, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 163, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 169, Short.MAX_VALUE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 338, Short.MAX_VALUE))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(labelinputcount)
                            .addComponent(inputcount, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(10, 10, 10)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(labelhiddencount)
                            .addComponent(hiddencount, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(comboboxtrainset, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(labeltrainset))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 9, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(comboboxtestset, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(labeltestset))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(comboboxalgorithm, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(labelalgorithm))
                        .addGap(11, 11, 11)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(train)
                            .addComponent(test)
                            .addComponent(clear)
                            .addComponent(graph))))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void trainActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_trainActionPerformed
        try {
            if ("".equals(trainset.getText())) {
                String filename = "train_" + comboboxtrainset.getSelectedItem() + ".txt";
                File files = new File(filename);
                io_elements = Matrix.fileread(filename, Integer.parseInt(inputcount.getText()));
                trainset.read( new FileReader( files.getAbsolutePath() ), null );
            } else {
                io_elements = Matrix.textread(trainset.getText(), Integer.parseInt(inputcount.getText()));
            }
            output = Tkaformplus.main(true, comboboxalgorithm.getSelectedIndex(), io_elements, Integer.parseInt(hiddencount.getText()), null);
        } catch (UnsupportedEncodingException ex) {
            Logger.getLogger(tkaframe.class.getName()).log(Level.SEVERE, null, ex);
        } catch (FileNotFoundException ex) {
            Logger.getLogger(tkaframe.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(tkaframe.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_trainActionPerformed

    private void testActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_testActionPerformed
        try {
             if ("".equals(testset.getText())) {
                String filename = "test_" + comboboxtestset.getSelectedItem() + ".txt";
                File files = new File(filename);
                io_elements = Matrix.fileread(filename, Integer.parseInt(inputcount.getText()));
                testset.read( new FileReader( files.getAbsolutePath() ), null );
             } else
                io_elements = Matrix.textread(testset.getText(), Integer.parseInt(inputcount.getText()));
            Tkaformplus.main(false, comboboxalgorithm.getSelectedIndex(), io_elements, Integer.parseInt(hiddencount.getText()), output);
        } catch (UnsupportedEncodingException ex) {
            Logger.getLogger(tkaframe.class.getName()).log(Level.SEVERE, null, ex);
        } catch (FileNotFoundException ex) {
            Logger.getLogger(tkaframe.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(tkaframe.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_testActionPerformed

    private void clearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearActionPerformed
    //    Chart.plot(null);
        textarea.setText("");
        trainset.setText("");
        testset.setText("");
        final int height = 300;
        final int width = 300;
        final int slide = 10;

        frame.getContentPane().setBackground(Color.CYAN);
        frame.setTitle("kordinatlar");
        frame.setSize(width+5*slide, height+5*slide);

        JPanel jp = new JPanel() {
            @Override
            public void paintComponent( Graphics g ) {
                super.paintComponent(g);
                Graphics2D g2 = (Graphics2D)g;

                Line2D linex, liney, line;

                linex = new Line2D.Double(0+slide, 0+slide, 0+slide, height-slide);
                for (int i = 0; i < height; i++)
                  g.drawString("hop-", 0, height-i*15);
                for (int i = 0; i < width; i++)
                  g.drawString("top-", i*15, height);
                liney = new Line2D.Double(0+slide, height-slide, width-slide, height-slide);
                line = new Line2D.Double(10+slide, 10+slide, 40, 40);

                //g2.setColor(Color.red);
                g2.setStroke(new BasicStroke(1));
                g2.setBackground(Color.black);

                g2.draw(linex);
                g2.draw(liney);
                g2.draw(line);
                
            }            
        };
        
        frame.add(jp);
        frame.setVisible( true );
    }//GEN-LAST:event_clearActionPerformed
    
    private void exitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitActionPerformed
        System.exit(1);        
}//GEN-LAST:event_exitActionPerformed

    private void opentrainfileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_opentrainfileActionPerformed
        final JFileChooser filechooser = new JFileChooser();
        int returnVal = filechooser.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            File files = filechooser.getSelectedFile();
            try {
                io_elements = Matrix.fileread(filechooser.getName(files), Integer.parseInt(inputcount.getText()));
            } catch (UnsupportedEncodingException ex) {
                Logger.getLogger(tkaframe.class.getName()).log(Level.SEVERE, null, ex);
            } catch (FileNotFoundException ex) {
                Logger.getLogger(tkaframe.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException ex) {
                Logger.getLogger(tkaframe.class.getName()).log(Level.SEVERE, null, ex);
            }
            input_elements = io_elements.get(0);
            output_elements = io_elements.get(1);
            try {
              // What to do with the file, e.g. display it in a TextArea
              trainset.read( new FileReader( files.getAbsolutePath() ), null );
            } catch (IOException ex) {
              System.out.println("problem accessing file"+files.getAbsolutePath());
            }
        } else {
            System.out.println("File access cancelled by user.");
        }
    }//GEN-LAST:event_opentrainfileActionPerformed

    private void opentestfileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_opentestfileActionPerformed
        final JFileChooser filechooser = new JFileChooser();
        int returnVal = filechooser.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            File files = filechooser.getSelectedFile();
            try {
                io_elements = Matrix.fileread(filechooser.getName(files), Integer.parseInt(inputcount.getText()));
            } catch (UnsupportedEncodingException ex) {
                Logger.getLogger(tkaframe.class.getName()).log(Level.SEVERE, null, ex);
            } catch (FileNotFoundException ex) {
                Logger.getLogger(tkaframe.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException ex) {
                Logger.getLogger(tkaframe.class.getName()).log(Level.SEVERE, null, ex);
            }
            input_elements = io_elements.get(0);
            output_elements = io_elements.get(1);
            try {
              // What to do with the file, e.g. display it in a TextArea
              testset.read( new FileReader( files.getAbsolutePath() ), null );
            } catch (IOException ex) {
              System.out.println("problem accessing file"+files.getAbsolutePath());
            }
        } else {
            System.out.println("File access cancelled by user.");
        }
    }//GEN-LAST:event_opentestfileActionPerformed

    private void graphActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_graphActionPerformed
        JFrame f = new JFrame("Load Image Sample");  
        f.add(new Loadimage());  
        f.pack();
        f.setVisible(true);
    }//GEN-LAST:event_graphActionPerformed

    private void hiddencountActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_hiddencountActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_hiddencountActionPerformed
 
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {

            @Override
            public void run() {
                new tkaframe().setVisible(true);
            }

        });
    }

    private void updateTextArea(final String text) {
        SwingUtilities.invokeLater(new Runnable() {
            @Override
            public void run() {
                String[] error;
                error = text.split("error:");
                if (error.length == 1)
                    textarea.append(text);
                else {
                    errors.add(Double.parseDouble(error[1]));
                    //Chart.plot(errors);
                    //f.add(new Loadimage());  
                }
            }
        });
    }

    private void redirectSystemStreams() {
        OutputStream out = new OutputStream() {
            @Override
            public void write(int b) throws IOException {
                updateTextArea(String.valueOf((char) b));
            }

            @Override
            public void write(byte[] b, int off, int len) throws IOException {
                updateTextArea(new String(b, off, len));
            }

            @Override
            public void write(byte[] b) throws IOException {
                write(b, 0, b.length);
            }
        };

        System.setOut(new PrintStream(out, true));
        System.setErr(new PrintStream(out, true));
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton clear;
    private javax.swing.JComboBox comboboxalgorithm;
    private javax.swing.JComboBox comboboxtestset;
    private javax.swing.JComboBox comboboxtrainset;
    private javax.swing.JMenuItem exit;
    private javax.swing.JMenu file;
    private javax.swing.JButton graph;
    private javax.swing.JTextField hiddencount;
    private javax.swing.JTextField inputcount;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JLabel labelalgorithm;
    private javax.swing.JLabel labelhiddencount;
    private javax.swing.JLabel labelinputcount;
    private javax.swing.JLabel labeltestset;
    private javax.swing.JLabel labeltrainset;
    private javax.swing.JMenuBar menu;
    private javax.swing.JMenuItem opentestfile;
    private javax.swing.JMenuItem opentrainfile;
    private javax.swing.JButton test;
    private javax.swing.JTextArea testset;
    private javax.swing.JTextArea textarea;
    private javax.swing.JButton train;
    private javax.swing.JTextArea trainset;
    // End of variables declaration//GEN-END:variables
}
