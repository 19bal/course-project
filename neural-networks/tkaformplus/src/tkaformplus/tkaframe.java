/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * tkaframe.java
 *
 * Created on 19.Mar.2012, 20:53:13
 */
package tkaformplus;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.io.OutputStream;
import java.io.PrintStream;
import java.io.UnsupportedEncodingException;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.SwingUtilities;

/**
 *
 * @author gdemir
 */
public class tkaframe extends javax.swing.JFrame {
    List<List> output = new ArrayList<List>();
    public List<List> io_elements = new ArrayList<List>();
    public List<List> input_elements = new ArrayList<List>();
    public List<Double> output_elements = new ArrayList<Double>();

    
    /** Creates new form tkaframe */
    public tkaframe() {
        initComponents();
        redirectSystemStreams();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        textarea = new javax.swing.JTextArea();
        combobox = new javax.swing.JComboBox();
        train = new javax.swing.JButton();
        test = new javax.swing.JButton();
        clear = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        trainset = new javax.swing.JTextArea();
        jScrollPane3 = new javax.swing.JScrollPane();
        testset = new javax.swing.JTextArea();
        inputcount = new javax.swing.JTextField();
        labelinputcount = new javax.swing.JLabel();
        hiddencount = new javax.swing.JTextField();
        labelhiddencount = new javax.swing.JLabel();
        graph = new javax.swing.JButton();
        menu = new javax.swing.JMenuBar();
        file = new javax.swing.JMenu();
        opentrainfile = new javax.swing.JMenuItem();
        opentestfile = new javax.swing.JMenuItem();
        exit = new javax.swing.JMenuItem();
        about = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        textarea.setColumns(20);
        textarea.setRows(5);
        jScrollPane1.setViewportView(textarea);

        combobox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "perceptron", "adaline", "backpropagation" }));

        train.setText("train");
        train.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                trainActionPerformed(evt);
            }
        });

        test.setText("test");
        test.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                testActionPerformed(evt);
            }
        });

        clear.setText("clear");
        clear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearActionPerformed(evt);
            }
        });

        trainset.setColumns(20);
        trainset.setRows(5);
        jScrollPane2.setViewportView(trainset);

        testset.setColumns(20);
        testset.setRows(5);
        jScrollPane3.setViewportView(testset);

        labelinputcount.setText("input count");

        labelhiddencount.setText("hidden count");

        graph.setText("error");
        graph.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                graphActionPerformed(evt);
            }
        });

        file.setText("File");

        opentrainfile.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_MASK));
        opentrainfile.setText("Open Train File");
        opentrainfile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                opentrainfileActionPerformed(evt);
            }
        });
        file.add(opentrainfile);

        opentestfile.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_T, java.awt.event.InputEvent.CTRL_MASK));
        opentestfile.setText("Open Test File");
        opentestfile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                opentestfileActionPerformed(evt);
            }
        });
        file.add(opentestfile);

        exit.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_C, java.awt.event.InputEvent.CTRL_MASK));
        exit.setText("Exit");
        exit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitActionPerformed(evt);
            }
        });
        file.add(exit);

        menu.add(file);

        about.setText("About");
        menu.add(about);

        setJMenuBar(menu);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 239, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(labelinputcount)
                            .addComponent(labelhiddencount))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(hiddencount)
                            .addComponent(inputcount, javax.swing.GroupLayout.DEFAULT_SIZE, 151, Short.MAX_VALUE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 496, Short.MAX_VALUE)
                    .addComponent(combobox, 0, 496, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(train, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(test, javax.swing.GroupLayout.DEFAULT_SIZE, 109, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(clear, javax.swing.GroupLayout.DEFAULT_SIZE, 109, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(graph, javax.swing.GroupLayout.DEFAULT_SIZE, 109, Short.MAX_VALUE)
                        .addGap(42, 42, 42)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 214, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 94, Short.MAX_VALUE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 319, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(combobox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(labelinputcount)
                    .addComponent(inputcount, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(10, 10, 10)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(train)
                    .addComponent(labelhiddencount)
                    .addComponent(hiddencount, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(test)
                    .addComponent(clear)
                    .addComponent(graph))
                .addGap(53, 53, 53))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void trainActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_trainActionPerformed
        try {
            
            io_elements = Matrix.textread(trainset.getText(), Integer.parseInt(inputcount.getText()));
            output = Tkaformplus.main(true, combobox.getSelectedIndex(), io_elements, Integer.parseInt(hiddencount.getText()), null);
        } catch (UnsupportedEncodingException ex) {
            Logger.getLogger(tkaframe.class.getName()).log(Level.SEVERE, null, ex);
        } catch (FileNotFoundException ex) {
            Logger.getLogger(tkaframe.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(tkaframe.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_trainActionPerformed

    private void testActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_testActionPerformed
        try {
            io_elements = Matrix.textread(testset.getText(), Integer.parseInt(inputcount.getText()));
            Tkaformplus.main(false, combobox.getSelectedIndex(), io_elements, Integer.parseInt(hiddencount.getText()), output);
        } catch (UnsupportedEncodingException ex) {
            Logger.getLogger(tkaframe.class.getName()).log(Level.SEVERE, null, ex);
        } catch (FileNotFoundException ex) {
            Logger.getLogger(tkaframe.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(tkaframe.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_testActionPerformed

    private void clearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearActionPerformed
    //    Chart.plot(null);
        textarea.setText("");
    }//GEN-LAST:event_clearActionPerformed

    private void exitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitActionPerformed
        System.exit(1);        
}//GEN-LAST:event_exitActionPerformed

    private void opentrainfileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_opentrainfileActionPerformed
        final JFileChooser filechooser = new JFileChooser();
        int returnVal = filechooser.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            File files = filechooser.getSelectedFile();
            try {
                io_elements = Matrix.fileread(filechooser.getName(files), Integer.parseInt(inputcount.getText()));
            } catch (UnsupportedEncodingException ex) {
                Logger.getLogger(tkaframe.class.getName()).log(Level.SEVERE, null, ex);
            } catch (FileNotFoundException ex) {
                Logger.getLogger(tkaframe.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException ex) {
                Logger.getLogger(tkaframe.class.getName()).log(Level.SEVERE, null, ex);
            }
            input_elements = io_elements.get(0);
            output_elements = io_elements.get(1);
            try {
              // What to do with the file, e.g. display it in a TextArea
              trainset.read( new FileReader( files.getAbsolutePath() ), null );
            } catch (IOException ex) {
              System.out.println("problem accessing file"+files.getAbsolutePath());
            }
        } else {
            System.out.println("File access cancelled by user.");
        }
    }//GEN-LAST:event_opentrainfileActionPerformed

    private void opentestfileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_opentestfileActionPerformed
        final JFileChooser filechooser = new JFileChooser();
        int returnVal = filechooser.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            File files = filechooser.getSelectedFile();
            try {
                io_elements = Matrix.fileread(filechooser.getName(files), Integer.parseInt(inputcount.getText()));
            } catch (UnsupportedEncodingException ex) {
                Logger.getLogger(tkaframe.class.getName()).log(Level.SEVERE, null, ex);
            } catch (FileNotFoundException ex) {
                Logger.getLogger(tkaframe.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException ex) {
                Logger.getLogger(tkaframe.class.getName()).log(Level.SEVERE, null, ex);
            }
            input_elements = io_elements.get(0);
            output_elements = io_elements.get(1);
            try {
              // What to do with the file, e.g. display it in a TextArea
              testset.read( new FileReader( files.getAbsolutePath() ), null );
            } catch (IOException ex) {
              System.out.println("problem accessing file"+files.getAbsolutePath());
            }
        } else {
            System.out.println("File access cancelled by user.");
        }
    }//GEN-LAST:event_opentestfileActionPerformed

    private void graphActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_graphActionPerformed
        JFrame f = new JFrame("Load Image Sample");  
        f.add(new Loadimage());  
        f.pack();  
        f.setVisible(true);
    }//GEN-LAST:event_graphActionPerformed

     
 
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {

            @Override
            public void run() {
                new tkaframe().setVisible(true);
            }
            
            
        });
    }

    private void updateTextArea(final String text) {
        SwingUtilities.invokeLater(new Runnable() {
            @Override
            public void run() {
                textarea.append(text);
            }
        });
    }
    

    private void redirectSystemStreams() {
        OutputStream out = new OutputStream() {
            @Override
            public void write(int b) throws IOException {
                updateTextArea(String.valueOf((char) b));
            }

            @Override
            public void write(byte[] b, int off, int len) throws IOException {
                updateTextArea(new String(b, off, len));
            }

            @Override
            public void write(byte[] b) throws IOException {
                write(b, 0, b.length);
            }
        };

        System.setOut(new PrintStream(out, true));
        System.setErr(new PrintStream(out, true));
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenu about;
    private javax.swing.JButton clear;
    private javax.swing.JComboBox combobox;
    private javax.swing.JMenuItem exit;
    private javax.swing.JMenu file;
    private javax.swing.JButton graph;
    private javax.swing.JTextField hiddencount;
    private javax.swing.JTextField inputcount;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JLabel labelhiddencount;
    private javax.swing.JLabel labelinputcount;
    private javax.swing.JMenuBar menu;
    private javax.swing.JMenuItem opentestfile;
    private javax.swing.JMenuItem opentrainfile;
    private javax.swing.JButton test;
    private javax.swing.JTextArea testset;
    private javax.swing.JTextArea textarea;
    private javax.swing.JButton train;
    private javax.swing.JTextArea trainset;
    // End of variables declaration//GEN-END:variables
}
